# -*- coding: utf-8 -*-
"""Task 1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OiKRHHuTXQHRekwirDOs6od7Zoh2jNuo
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# 1) Importing the dataset and exploring basic info like nulls and datatypes of the dataset.


df = pd.read_csv("Titanic-Dataset.csv")

print(df) # Shows the dataset

print(df.info()) # Shows the data types and non - null counts

print(df.isnull().sum()) # Checks the number of missing values in the columns of the dataset

# 2) Handling missing values in the dataset.


# For "Age" column

df["Age"] = df["Age"].fillna(df["Age"].median())

# For "Cabin" column

df["Cabin"] = df["Cabin"].fillna(df["Cabin"].mode()[0])

# For "Embarked" column

df["Embarked"] = df["Embarked"].fillna(df["Embarked"].mode()[0])

print(df.isnull().sum())

# 3) Converting categorical features into numerical using encoding.


print(df.dtypes) # We'll first check what columns are the categorical features in the dataset

# Applying encoding

df["Sex"] = df["Sex"].map({'male':0, 'female':1})

df = pd.get_dummies(df, columns=["Embarked"], drop_first = True)

df.drop(columns = ['Name', 'Ticket', 'Cabin'], inplace = True, errors = 'ignore') # Dropping columns which won't help in modelling the dataset

print(df.head())
print(df.dtypes)

# 4) Normalizing / standardizing the numerical features.


# Identifying numerical columns

print(df.select_dtypes(include = ['int64', 'float64']).columns)

# Normalizing numerical features

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
df[['Age', 'Fare', 'SibSp', 'Parch']] = scaler.fit_transform(df[['Age', 'Fare', 'SibSp', 'Parch']])

# 5) Visualize outliers using boxplots and remove them.


# a. Survival count
sns.countplot(data = df, x = 'Survived')
plt.title("Survival Count (0 = Died, 1 = Survived)")
plt.show()

# b. Survival on the basis of gender
sns.countplot(data = df, x = 'Sex', hue = 'Survived')
plt.title("Suvival on the basis of Sex")
plt.show()

# c. Survival on the basis of Passenger Class
sns.countplot(data = df, x = 'Pclass', hue = 'Survived')
plt.title("Survival on the basis of Passenger Class")
plt.show()

# d. Age versus Survival using KDE
sns.kdeplot(data = df[df['Survived'] == 1], x = 'Age', label = 'Survived', shade = True)
sns.kdeplot(data = df[df['Survived'] == 0], x = 'Age', label = 'Did not Survived', shade = True)
plt.title("Age Distribution by Survival")
plt.legend()
plt.show()

# e. Fare Paid versus Survival
sns.boxplot(data = df, x = 'Survived', y = 'Fare')
plt.title("Fare Paid versus Survival")
plt.show()